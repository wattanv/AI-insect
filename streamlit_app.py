import streamlit as st
from datetime import datetime
from PIL import Image
import numpy as np
import cv2
import os
from roboflow import Roboflow


st.set_page_config(page_title="AI Insect Count", layout="wide", page_icon="ü¶ü")

st.markdown(
    """
    <div style="
        background: linear-gradient(to right, #6ab04c, #badc58);
        border-radius: 12px;
        padding: 10px 0;
        text-align: center;
        font-size: 28px;
        font-weight: bold;
        color: white;
        margin-bottom: 20px;
    ">
        AI Insect Count
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("""
<style>
.stSelectbox > div > div, .stDateInput > div > div, .stTextInput > div > div > input {
    background-color: #f0f8ff !important;
    border-radius: 8px !important;
}
div.stButton > button {
    background-color: #27ae60;
    color: white;
    font-weight: bold;
    border-radius: 25px;
    padding: 10px 40px;
    font-size: 18px;
    width: 100%;
}
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_insect_model():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏°‡∏•‡∏á‡∏à‡∏≤‡∏Å Roboflow"""
    try:
        API_KEY = "3ZQFofNJkviVJdyAb4mG"
        rf = Roboflow(api_key=API_KEY)
        project = rf.workspace("aiinsect").project("ai-insect")
        model = project.version(1).model
        return model
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ: {e}")
        return None

model = load_insect_model()
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None


col_left, col_right = st.columns([1, 1.5])

with col_left:
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à")
    
    factory = st.selectbox(
        "‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
        ["", "SB", "MDC", "MPK", "MPV", "MKS"],
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à"
    )
    inspection_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", datetime.today())
    department = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô/‡πÅ‡∏ú‡∏ô‡∏Å")
    location = st.text_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
    
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    source_option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ:", ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"], horizontal=True)

    uploaded_image = None
    if source_option == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå":
        uploaded_image = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...", type=["jpg", "jpeg", "png"], label_visibility="collapsed")
    else:
        uploaded_image = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á", label_visibility="collapsed")

    if st.button("Analysis"):
        if uploaded_image is None:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô")
        elif not model:
            st.error("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            try:
                with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
                    image_pil = Image.open(uploaded_image).convert("RGB")
                    
                    temp_path = "temp_insect_image.jpg"
                    image_pil.save(temp_path)
                    
                    results_json = model.predict(temp_path, confidence=40, overlap=30).json()
                    os.remove(temp_path) 
                    
                    predictions = results_json.get('predictions', [])
                    
                    image_cv2 = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)
                    for pred in predictions:
                        x, y, w, h = int(pred['x']), int(pred['y']), int(pred['width']), int(pred['height'])
                        x1, y1 = x - w // 2, y - h // 2
                        x2, y2 = x + w // 2, y + h // 2
                        
                        cv2.rectangle(image_cv2, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        label = f"{pred['class']} ({pred['confidence']:.2f})"
                        (lw, lh), base = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
                        cv2.rectangle(image_cv2, (x1, y1 - lh - 10), (x1 + lw, y1), (0, 255, 0), -1)
                        cv2.putText(image_cv2, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)

                    annotated_image_rgb = cv2.cvtColor(image_cv2, cv2.COLOR_BGR2RGB)

                    st.session_state.analysis_results = {
                        "total_insects": len(predictions),
                        "annotated_image": annotated_image_rgb,
                        "original_image": image_pil
                    }
                
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.rerun()

            except Exception as e:
                st.error("üò≠ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•!")
                st.exception(e)

with col_right:
    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    results = st.session_state.get('analysis_results')

    if results:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Total Insects)", f"{results.get('total_insects', 0)} ‡∏ï‡∏±‡∏ß")
        st.markdown("---")
        st.markdown("#### ‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏Å‡∏≤‡∏ß‡∏ó‡∏µ‡πà Label (Picture Label)")
        st.image(results.get("annotated_image"), use_container_width=True)
    else:
        st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Analysis' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

        placeholder_image = np.full((400, 600, 3), 240, dtype=np.uint8)
        cv2.putText(placeholder_image, "Analysis Result Here", (100, 200), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (180, 180, 180), 2)
        st.image(placeholder_image, use_container_width=True)
