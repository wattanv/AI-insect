import streamlit as st
from datetime import datetime, timezone, timedelta
from PIL import Image
import numpy as np
import cv2
import os
from roboflow import Roboflow
import pandas as pd
import io


LOCATION_DATA = {
    "SB": {"‡∏ö‡∏£‡∏£‡∏à‡∏∏": ["‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß", "‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 1", "‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 2", "‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 3", "‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ Auto", "‡∏´‡πâ‡∏≠‡∏á Mix SP", "‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ SP", "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏ä‡∏ô‡∏∞ ‡∏ä‡∏±‡πâ‡∏ô 1", "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏ä‡∏ô‡∏∞ ‡∏ä‡∏±‡πâ‡∏ô 2", "‡∏´‡πâ‡∏≠‡∏á Pack SP"]},
    "MDC": {
        "LS 1": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 4)], "LS 2": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 3)],
        "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 12)], "‡∏û‡∏±‡∏™‡∏î‡∏∏": ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1"], "‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 7"],
        "Conditioning Silo": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 4)], "SPP": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 13)],
        "HIT": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 6)], "Rock Sugar": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 5)],
        "‡∏ö‡∏£‡∏£‡∏à‡∏∏": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i}" for i in range(1, 9)], "‡∏´‡∏°‡πâ‡∏≠‡∏õ‡∏±‡πà‡∏ô‡∏£‡∏µ‡πÑ‡∏ü‡∏ô‡πå": ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1"],
    },
    "MPK": {
        "‡∏ö‡∏£‡∏£‡∏à‡∏∏": ["1.‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö 50 ‡∏Å‡∏Å.", "2.‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö 50 ‡∏Å‡∏Å.", "3.‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 50 ‡∏Å‡∏Å.", "4.‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö silo", "5.‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 1000 ‡∏Å‡∏Å. Silo", "6.‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ 1 ‡∏Å‡∏Å. Silo", "7.‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏‡πÅ‡∏û‡πá‡∏Ñ‡πÇ‡∏ñ 5", "8.‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö White 1000 ‡∏Å‡∏Å.‡πÉ‡∏´‡∏°‡πà", "9.‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏White 1000kg.‡πÉ‡∏´‡∏°‡πà", "18. ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏ Demerara"],
        "‡πÄ‡∏Ñ‡∏µ‡πà‡∏¢‡∏ß‡∏õ‡∏±‡πà‡∏ô‡∏£‡∏µ‡πÑ‡∏ü‡∏ô‡πå": ["10.‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ï‡πâ‡∏´‡∏°‡πâ‡∏≠‡∏õ‡∏±‡πà‡∏ô", "11.‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏á", "12.‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á No.2", "13.‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á", "14.‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏ô", "15.‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏ö‡∏ô No.2"],
        "Conditioning Silo": ["16.‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á‡∏Ñ‡∏±‡∏î‡πÄ‡∏°‡πá‡∏î Nestle", "17.‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á‡∏Ñ‡∏±‡∏î‡πÄ‡∏°‡πá‡∏î Rotex"]
    },
    "MPV": {
        "‡∏ö‡∏£‡∏£‡∏à‡∏∏": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i} ‡∏ö‡∏£‡∏£‡∏à‡∏∏" for i in range(1, 13)], "‡πÄ‡∏Ñ‡∏µ‡πà‡∏¢‡∏ß‡∏õ‡∏±‡πà‡∏ô‡∏£‡∏µ‡πÑ‡∏ü‡∏ô‡πå": ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏Ñ‡∏µ‡πà‡∏¢‡∏ß‡∏õ‡∏±‡πà‡∏ô‡∏£‡∏µ‡πÑ‡∏ü‡∏ô‡πå"],
        "Conditioning Silo": ["‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1 Conditioning Silo"], "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©": [f"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i} ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©" for i in range(1, 5)]
    },
    "MKS": {
        "‡∏ö‡∏£‡∏£‡∏à‡∏∏": ["ILP01 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏", "ILP02 ‡∏´‡πâ‡∏≠‡∏á NCS Auto", "ILP03 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏ä‡∏ô‡∏∞, ‡∏´‡πâ‡∏≠‡∏á Auto", "ILP04 ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• 25/50‡∏Å‡∏Å. ‡∏¢‡∏∏‡πâ‡∏á 2", "ILP05 ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• 25/50‡∏Å‡∏Å. ‡∏¢‡∏∏‡πâ‡∏á 1", "ILP06 ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• MG 1 ‡∏Å‡∏Å.", "ILP07 ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡∏Å‡∏•‡πà‡∏≠‡∏á MG 1 ‡∏Å‡∏Å.", "ILP08 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏ä‡∏ô‡∏∞ 25/50 ‡∏Å‡∏Å.", "ILP09 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏ä‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏", "ILP10 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏•‡∏¥‡∏ï MG", "ILP11 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡∏ú‡∏•‡∏¥‡∏ï MG", "ILP12 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó Auto", "ILP13 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó Auto"],
        "‡∏´‡∏°‡πâ‡∏≠‡∏õ‡∏±‡πà‡∏ô": ["NO1 ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á‡πÇ‡∏¢‡∏Å"]
    }
}
EXCEL_FILENAME = "insect_analysis_history.xlsx"

@st.cache_resource
def load_insect_model():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏°‡∏•‡∏á‡∏à‡∏≤‡∏Å Roboflow"""
    try:
        API_KEY = "3ZQFofNJkviVJdyAb4mG"
        rf = Roboflow(api_key=API_KEY)
        project = rf.workspace("aiinsect").project("ai-insect")
        model = project.version(3).model
        return model
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ: {e}")
        return None

st.set_page_config(page_title="AI Insect Count", layout="wide", page_icon="ü¶ü")
st.markdown(
    """
    <div style="
        background: linear-gradient(to right, #6ab04c, #badc58);
        border-radius: 12px; padding: 10px 0; text-align: center;
        font-size: 28px; font-weight: bold; color: white; margin-bottom: 20px;
    ">
        AI Insect Count
    </div>
    """, unsafe_allow_html=True
)
st.markdown("""
<style>
.stSelectbox > div > div, .stDateInput > div > div, .stTextInput > div > div > input, .stTextArea > div > textarea {
    background-color: #f0f8ff !important; border-radius: 8px !important;
}
div.stButton > button, .stForm [data-testid=stFormSubmitButton] button {
    background-color: #27ae60; color: white; font-weight: bold; border-radius: 25px;
    padding: 10px 40px; font-size: 18px;
}
</style>
""", unsafe_allow_html=True)

model = load_insect_model()
keys_to_init = {
    'analysis_results': None, 'factory': "", 'department': "", 'location': "", 
    'inspection_date': datetime.now(timezone(timedelta(hours=7))).date(),
    'excel_data_to_download': None, 'excel_filename': ""
}
for key, value in keys_to_init.items():
    if key not in st.session_state:
        st.session_state[key] = value

col_left, col_right = st.columns([1, 1.2])

with col_left:
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à")
    
    def on_factory_change(): st.session_state.department = ""; st.session_state.location = ""
    st.selectbox("‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", [""] + sorted(LOCATION_DATA.keys()), key='factory', on_change=on_factory_change)

    def on_department_change(): st.session_state.location = ""
    department_list = [""] + sorted(LOCATION_DATA[st.session_state.factory].keys()) if st.session_state.factory else [""]
    st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô/‡πÅ‡∏ú‡∏ô‡∏Å", department_list, key='department', on_change=on_department_change, disabled=not st.session_state.factory)

    location_list = [""] + sorted(LOCATION_DATA[st.session_state.factory][st.session_state.department]) if st.session_state.factory and st.session_state.department else [""]
    st.selectbox("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á", location_list, key='location', disabled=not st.session_state.department)
    
    st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", key='inspection_date')
    
    with st.form("analysis_form", clear_on_submit=True):
        st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        source_option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ:", ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"], horizontal=True)
        uploaded_image = None
        if source_option == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå":
            uploaded_image = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå...", type=["jpg", "jpeg", "png"], label_visibility="collapsed")
        else:
            uploaded_image = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û", label_visibility="collapsed")
        
        analysis_button = st.form_submit_button("Analysis", use_container_width=True)

if analysis_button:
    st.session_state.analysis_results = None
    st.session_state.excel_data_to_download = None
    
    if not all([st.session_state.factory, st.session_state.department, st.session_state.location]):
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô, ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    elif uploaded_image is None:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô")
    elif not model:
        st.error("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        try:
            with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
                image_pil = Image.open(uploaded_image).convert("RGB")
                temp_path = "temp_insect_image.jpg"
                image_pil.save(temp_path)
                
                results_json = model.predict(temp_path, confidence=40, overlap=30).json()
                os.remove(temp_path) 
                
                predictions = results_json.get('predictions', [])
                
                image_cv2 = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)
                for pred in predictions:
                    x, y, w, h = int(pred['x']), int(pred['y']), int(pred['width']), int(pred['height'])
                    x1, y1, x2, y2 = x - w // 2, y - h // 2, x + w // 2, y + h // 2
                    cv2.rectangle(image_cv2, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    label = f"{pred['class']} ({pred['confidence']:.2f})"
                    (lw, lh), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
                    cv2.rectangle(image_cv2, (x1, y1 - lh - 10), (x1 + lw, y1), (0, 255, 0), -1)
                    cv2.putText(image_cv2, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)

                annotated_image_rgb = cv2.cvtColor(image_cv2, cv2.COLOR_BGR2RGB)

                st.session_state.analysis_results = {
                    "total_insects": len(predictions),
                    "annotated_image": annotated_image_rgb,
                }
            st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        except Exception as e:
            st.error("üò≠ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á!")
            st.exception(e)

with col_right:
    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    results = st.session_state.get('analysis_results')

    if results:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Total Insects)", f"{results.get('total_insects', 0)} ‡∏ï‡∏±‡∏ß")
        st.markdown("---")
        st.markdown("#### ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà Label ‡πÅ‡∏•‡πâ‡∏ß (Picture Label)")
        st.image(results.get("annotated_image"), use_container_width=True)

        st.markdown("---")
        st.subheader("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•")
        
        with st.form("save_form"):
            recorder_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            notes = st.text_area("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
            save_button = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")

            if save_button:
                if not recorder_name.strip():
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                else:
                    try:
                        bkk_timezone = timezone(timedelta(hours=7))
                        time_in_bkk = datetime.now(bkk_timezone)
                        
                        new_record_data = {
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à": st.session_state.inspection_date.strftime("%Y-%m-%d"),
                            "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å": time_in_bkk.strftime("%H:%M:%S"),
                            "‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô": st.session_state.factory,
                            "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô/‡πÅ‡∏ú‡∏ô‡∏Å": st.session_state.department,
                            "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á": st.session_state.location,
                            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": results.get("total_insects", 0),
                            "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å": recorder_name,
                            "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": notes
                        }
                        df_new = pd.DataFrame([new_record_data])

                        if os.path.exists(EXCEL_FILENAME):
                            df_existing = pd.read_excel(EXCEL_FILENAME, engine='openpyxl')
                            df_combined = pd.concat([df_existing, df_new], ignore_index=True)
                        else:
                            df_combined = df_new
                        
                        df_combined.to_excel(EXCEL_FILENAME, index=False)
                        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

                      
                        output = io.BytesIO()
                        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                            df_combined.to_excel(writer, index=False, sheet_name='AnalysisHistory')
                        
                        st.session_state.excel_data_to_download = output.getvalue()
                        st.session_state.excel_filename = EXCEL_FILENAME
                        st.rerun()

                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {e}")

        if st.session_state.get("excel_data_to_download"):
            st.download_button(
                label="üì• ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
                data=st.session_state.excel_data_to_download,
                file_name=st.session_state.excel_filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        with st.container(border=True, height=500):
             st.info("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Analysis' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
